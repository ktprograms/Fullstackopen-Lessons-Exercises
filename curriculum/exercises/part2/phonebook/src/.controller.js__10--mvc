import { Model } from './model';
import { PersonExistsError } from './util/error';
import { View } from './view';

export const Controller = {
    init() {
        Model
            .getPersons()
            .then(function (persons) {
                persons.forEach(Controller.addPerson);
            });
        View.registerOnFilterInput(Controller.filterPersons);
        View.registerOnSubmit(Controller.handleSubmit);
        View.registerOnItemDeleteClick(Controller.handleItemDeleteClick);
    },

    handleSubmit(event) {
        event.preventDefault();
        const formData = new FormData(event.target);

        const newPerson = {
            name: formData.get('name'),
            number: formData.get('number'),
        };

        Model
            .addPerson(newPerson)
            .then(function (returnedPerson) {
                Controller.addPerson(returnedPerson);
            })
            .catch(function (exception) {
                if (exception instanceof PersonExistsError) {
                    alert(`${newPerson.name} is already added to phonebook`);
                } else {
                    alert(exception.message);
                }
            });

        event.target.reset();
    },

    handleItemDeleteClick(id) {
        const person = Model.persons.find(function (person) {
            return person.id === id;
        });
        if (window.confirm(`Delete ${person.name}?`)) {
            Model
                .removePerson(id)
                .then(function (removedId) {
                    View.removePerson(removedId);
                });
        }
    },

    addPerson(person) {
        View.createPerson(person.id);
        const personText = person.name + ' ' + person.number;
        View.setPerson(person.id, personText);
        Controller.filterPersons();
    },

    filterPersons() {
        const filter = View.getFilterValue();

        View.filterPersons(function (personId) {
            const foundPerson = Model.persons.find(function (person) {
                return person.id === personId;
            });

            return foundPerson.name.toLowerCase().includes(filter.toLowerCase());
        });
    },
};
