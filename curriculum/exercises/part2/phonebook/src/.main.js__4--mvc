const Model = {
    persons: [
        { name: 'Arto Hellas', number: '040-1234567' },
    ],

    addPerson(person) {
        const foundPerson = Model.persons.find(function (p) {
            return p.name === person.name;
        });
        if (foundPerson) {
            throw new Error(`${foundPerson.name} is already added to phonebook`);
        } else {
            Model.persons.push(person);
            return person;
        }
    },
};

const View = {
    registerOnFilterInput(handler) {
        document.querySelector('input.filter').addEventListener('input', handler);
    },
    registerOnSubmit(handler) {
        document.querySelector('form.add').addEventListener('submit', handler);
    },

    setPerson(id, person) {
        document.querySelector(`.person[data-id="${id}"]`).textContent = person;
    },

    getFilterValue() {
        return document.querySelector('input.filter').value;
    },
    createPerson(id) {
        const person = document.createElement('div');
        person.classList.add('person');
        person.dataset.id = id;
        document.querySelector('.persons').appendChild(person);
    },
    filterPersons(filterFunction) {
        const personElements = document.querySelectorAll('.person');
        personElements.forEach(function (personElement) {
            const id = personElement.dataset.id;

            if (filterFunction(id)) {
                personElement.classList.remove('hidden');
            } else {
                personElement.classList.add('hidden');
            }
        });
    },
};

const Controller = {
    init() {
        Model.persons.forEach(Controller.addPerson);
        View.registerOnFilterInput(Controller.filterPersons);
        View.registerOnSubmit(Controller.handleSubmit);
    },

    handleSubmit(event) {
        event.preventDefault();
        const formData = new FormData(event.target);

        const newPerson = {
            name: formData.get('name'),
            number: formData.get('number'),
        };

        try {
            const returnedPerson = Model.addPerson(newPerson);
            Controller.addPerson(returnedPerson);
        } catch (exception) {
            alert(exception.message);
        }

        event.target.reset();
    },

    addPerson(person) {
        View.createPerson(person.name);
        const personText = person.name + ' ' + person.number;
        View.setPerson(person.name, personText);
        Controller.filterPersons();
    },

    filterPersons() {
        const filter = View.getFilterValue();

        View.filterPersons(function (personId) {
            const foundPerson = Model.persons.find(function (person) {
                return person.name /* name used as id */ === personId;
            });

            return foundPerson.name.toLowerCase().includes(filter.toLowerCase());
        });
    },
};

Controller.init();
